<UserControl x:Class="MaterialDesignDemo.Snackbars"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MaterialDesignDemo"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:codeDisplayer="clr-namespace:CodeDisplayer;assembly=CodeDisplayer"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    
    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden">
        <codeDisplayer:XamlDisplayerPanel  Margin="0 0 0 4">
            <Border Background="{DynamicResource MaterialDesignSelection}" 
                    Padding="8 0 8 0">
                <Grid Height="200">
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock TextWrapping="WrapWithOverflow" Style="{DynamicResource MaterialDesignSubheadingTextBlock}">Example 1.</TextBlock>
                        <TextBlock TextWrapping="WrapWithOverflow" >Simple definition within XAML. Use the toggle to display the message.</TextBlock>
                        <ToggleButton x:Name="ToggleButton1" 
                                      Margin="0 8 0 0"/>
                    </StackPanel>
                    <!-- simplest form -->
                    <materialDesign:Snackbar Message="hello 1" 
                                             IsActive="{Binding ElementName=ToggleButton1, Path=IsChecked}"
                                             Width="300"/>
                </Grid>
            </Border>

            <Border Background="{DynamicResource MaterialDesignPaper}" Height="200"
                    Padding="8 0 8 0">
                <Grid>
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock TextWrapping="WrapWithOverflow" Style="{DynamicResource MaterialDesignSubheadingTextBlock}">Example 2.</TextBlock>
                        <TextBlock TextWrapping="WrapWithOverflow" >View source to see message defined in long hand, allowing action button content to be set.</TextBlock>
                        <ToggleButton x:Name="ToggleButton2"
                                      Margin="0 8 0 0" />
                    </StackPanel>
                    <!-- long hand form for setting the message -->
                    <materialDesign:Snackbar IsActive="{Binding ElementName=ToggleButton2, Path=IsChecked}">
                        <materialDesign:SnackbarMessage Content="Hello 2" ActionContent="UNDO" />
                    </materialDesign:Snackbar>
                </Grid>
            </Border>

            <Border Background="{DynamicResource MaterialDesignSelection}" 
                    Padding="8 0 8 0">
                            <!--
                    * using a message queue to manage queuing of messages, and getting onto correct thread
                    * notice the shorthand syntax {materialDesign:MessageQueue} for creating a new message 
                    queue without expanded XAML. useful in code-behind scenarios if you dont want to bind 
                    a message queue in to the snackbar.
                -->
                <Grid>
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock TextWrapping="WrapWithOverflow" Style="{DynamicResource MaterialDesignSubheadingTextBlock}">Example 3.</TextBlock>
                        <TextBlock TextWrapping="WrapWithOverflow" MaxWidth="300">In many real world scenario, notification display must deal with threading, queuing, and potentially heavy usage. A MessageQueue can be set to handle much of this for you, gicing the following benefits:</TextBlock>
                        <TextBlock TextWrapping="WrapWithOverflow" Margin="0 8 0 0" Text=" • Messages can be queued from any thread"/>
                        <TextBlock TextWrapping="WrapWithOverflow" Text=" • Message will auto hide after a time out period"/>
                        <TextBlock TextWrapping="WrapWithOverflow" Text=" • Notification will not time out if mouse is over it"/>
                        <TextBlock TextWrapping="WrapWithOverflow" Text=" • Can be paired with a DialogHost so timeout will pause if a active dialog"/>
                        <TextBlock TextWrapping="WrapWithOverflow" Text=" • Duplicate within a short period will be discarded"/>
                        <TextBlock TextWrapping="WrapWithOverflow" Text=" • A single message queue can be shared acros multiple Windows"/>
                        <TextBlock TextWrapping="WrapWithOverflow" Text=" • Works with code-behind and MVVM"/>
                        <Grid Margin="0 16 0 0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBox x:Name="MessageTextBox" VerticalAlignment="Top"
                                     Grid.Column="0">Hello World</TextBox>
                            <Button Click="SnackBar3_OnClick" Margin="16 0 0 0"
                                    Grid.Column="1">Send</Button>
                        </Grid>


                    </StackPanel>
                    <materialDesign:Snackbar MessageQueue="{materialDesign:MessageQueue}"
                                             x:Name="SnackbarThree" />
                </Grid>
            </Border>

            <Border Background="{DynamicResource MaterialDesignPaper}" 
                    Padding="8 0 8 0">
            <!-- illustrates queueing uses some action command call backs -->
                <Grid>
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock TextWrapping="WrapWithOverflow" Style="{DynamicResource MaterialDesignSubheadingTextBlock}">Example 4.</TextBlock>
                        <TextBlock TextWrapping="WrapWithOverflow" MaxWidth="300">Illustrates queueing (including discarding of duplicates), and handling of commands. Action a notification to see a System.Trace response..</TextBlock>
                        <Grid Margin="0 16 0 0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBox AcceptsReturn="True" x:Name="ExampleFourTextBox" TextWrapping="Wrap"
                                 Text="Message One&#x0d;&#x0a;Message Two&#x0d;&#x0a;Message Three&#x0d;&#x0a;Duplicate&#x0d;&#x0a;Duplicate&#x0d;&#x0a;Duplicate&#x0d;&#x0a;Start Fresh&#x0d;&#x0a;Goodbye" />
                            <Button Click="SnackBar4_OnClick" HorizontalAlignment="Center" Grid.Column="1">Send</Button>
                        </Grid>
                    </StackPanel>
                    <materialDesign:Snackbar MessageQueue="{materialDesign:MessageQueue}"
                                              x:Name="SnackbarFour" />
                </Grid>
            </Border>

            <Border Background="{DynamicResource MaterialDesignChipBackground}" Height="300">
            <!-- full width snack bar -->
                <StackPanel VerticalAlignment="Bottom">
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center"
                                Margin="0 0 0 32">
                        <TextBlock TextWrapping="WrapWithOverflow" Style="{DynamicResource MaterialDesignSubheadingTextBlock}">Example 5.</TextBlock>
                        <TextBlock TextWrapping="WrapWithOverflow">Illustrates a full width Snackbar.</TextBlock>
                        <ToggleButton x:Name="ToggleButton3"
                                      Margin="0 8 0 0" />
                    </StackPanel>
                    <materialDesign:Snackbar HorizontalAlignment="Stretch" IsActive="{Binding ElementName=ToggleButton3, Path=IsChecked}">
                        <materialDesign:SnackbarMessage Content="This Snackbar is stretched horizontally. Consider allowing your content to push up."                                                    
                                                        ActionContent="OK" />
                    </materialDesign:Snackbar>
                </StackPanel>
            </Border>

            <Border>
            <!-- colour variations -->
                <Border.Resources>
                    <ResourceDictionary>
                        <ResourceDictionary.MergedDictionaries>
                            <!-- here is where you can get additional snackbar button styles from -->
                            <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Snackbar.xaml" />
                        </ResourceDictionary.MergedDictionaries>
                    </ResourceDictionary>
                </Border.Resources>
                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                    <TextBlock TextWrapping="WrapWithOverflow" Style="{StaticResource MaterialDesignSubheadingTextBlock}">Example 6.</TextBlock>
                    <TextBlock TextWrapping="WrapWithOverflow">Action button colour variations.</TextBlock>
                    <materialDesign:Snackbar Margin="0 8 0 0" IsActive="True">
                        <materialDesign:SnackbarMessage Content="Default - accent"                                                    
                                                        ActionContent="ACCENT" />
                    </materialDesign:Snackbar>
                    <materialDesign:Snackbar Margin="0 8 0 0"
                                             IsActive="True"
                                             ActionButtonStyle="{StaticResource MaterialDesignSnackbarActionLightButton}">
                        <materialDesign:SnackbarMessage Content="Primary Light"                                                    
                                                        ActionContent="LIGHT" />
                    </materialDesign:Snackbar>
                    <materialDesign:Snackbar Margin="0 8 0 0"
                                             IsActive="True"
                                             ActionButtonStyle="{StaticResource MaterialDesignSnackbarActionMidButton}">
                        <materialDesign:SnackbarMessage Content="Primary Mid"                                                    
                                                        ActionContent="MID" />
                    </materialDesign:Snackbar>
                    <materialDesign:Snackbar Margin="0 8 0 0"
                                             IsActive="True"
                                             ActionButtonStyle="{StaticResource MaterialDesignSnackbarActionDarkButton}">
                        <materialDesign:SnackbarMessage Content="Primary Dark"                                                    
                                                        ActionContent="DARK" />
                    </materialDesign:Snackbar>
                </StackPanel>
            </Border>
        </codeDisplayer:XamlDisplayerPanel>
    </ScrollViewer>
</UserControl>
