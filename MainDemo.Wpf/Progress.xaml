<UserControl x:Class="MaterialDesignColors.WpfExample.Progress"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:codeDisplayer="clr-namespace:CodeDisplayer;assembly=CodeDisplayer"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- you only need bring this resource in if you want to specify the circular style statically -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ProgressBar.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <ScrollViewer>
        <codeDisplayer:XamlDisplayerPanel >
            <ProgressBar Orientation="Vertical" Width="200" Height="10" Value="25"   />
            <ProgressBar Orientation="Vertical"  Width="200" Height="10" IsIndeterminate="True"    />
            <ProgressBar Value="25"   Width="200" Height="10" />
            <ProgressBar Value="50"   Width="200" Height="10" materialDesign:TransitionAssist.DisableTransitions="True" />
            <ProgressBar Value="75"   Width="200" Height="10"/>
            <ProgressBar IsIndeterminate="True"   Width="200" Height="10"/>
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}" 
                     x:Name="DeterminateCircularProgress"
                      VerticalAlignment="Center" HorizontalAlignment="Center" Margin="12 12 12 12" />
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"                     
                     Value="35"
                     IsIndeterminate="True"
                      VerticalAlignment="Center" HorizontalAlignment="Center" Margin="12 12 12 12"/>
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"                     
                     Value="0"
                     IsIndeterminate="True"
                      VerticalAlignment="Center" HorizontalAlignment="Center" Margin="12 12 12 12"/>
            <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"                     
                     Value="20"
                     IsIndeterminate="True"
                     x:Name="IndeterminateToDeterminateCircularProgress"
                      VerticalAlignment="Center" HorizontalAlignment="Center" Margin="12 12 12 12" />
            <materialDesign:Card UniformCornerRadius="14" Padding="4"
                      
                      VerticalAlignment="Center" HorizontalAlignment="Center" Margin="12 12 12 12">
                <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}" 
                         Value="50"
                         IsIndeterminate="True"                         
                      />
            </materialDesign:Card>
            <materialDesign:Card UniformCornerRadius="14" 
                      RenderTransformOrigin=".5,.5"
                      Padding="4" 
                      
                      VerticalAlignment="Center" HorizontalAlignment="Center" Margin="12 12 12 12">
                <ProgressBar Style="{StaticResource MaterialDesignCircularProgressBar}"                          
                             x:Name="AnimatedProgressInCard"
                      />
                <materialDesign:Card.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="ScaleTransform" ScaleX="0" ScaleY="0" />
                    </TransformGroup>
                </materialDesign:Card.RenderTransform>
                <materialDesign:Card.Style>
                    <Style TargetType="materialDesign:Card" BasedOn="{StaticResource {x:Type materialDesign:Card}}">
                        <Style.Resources>
                            <Storyboard x:Key="FadeIn" FillBehavior="HoldEnd">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                    <EasingDoubleKeyFrame Value="0" />
                                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.8">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                    <EasingDoubleKeyFrame Value="0" />
                                    <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.8">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="FadeOut">
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                    <EasingDoubleKeyFrame Value="1" />
                                    <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.8">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                    <EasingDoubleKeyFrame Value="1" />
                                    <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.8">
                                        <EasingDoubleKeyFrame.EasingFunction>
                                            <CircleEase EasingMode="EaseOut" />
                                        </EasingDoubleKeyFrame.EasingFunction>
                                    </EasingDoubleKeyFrame>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </Style.Resources>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=AnimatedProgressInCard, Path=Value}" Value="20">
                                <DataTrigger.EnterActions>
                                    <RemoveStoryboard BeginStoryboardName="FadeOut" />
                                    <BeginStoryboard Storyboard="{StaticResource FadeIn}" Name="FadeIn" />
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=AnimatedProgressInCard, Path=Value}" Value="100">
                                <DataTrigger.EnterActions>
                                    <RemoveStoryboard BeginStoryboardName="FadeIn" />
                                    <BeginStoryboard Storyboard="{StaticResource FadeOut}" Name="FadeOut" />
                                </DataTrigger.EnterActions>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </materialDesign:Card.Style>

            </materialDesign:Card>
        </codeDisplayer:XamlDisplayerPanel>
    </ScrollViewer>
    <UserControl.Triggers>
        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
            <EventTrigger.Actions>
                <BeginStoryboard>
                    <Storyboard TargetName="DeterminateCircularProgress" TargetProperty="Value" RepeatBehavior="Forever" Duration="0:0:3">
                        <DoubleAnimation From="0" To="100" Duration="0:0:2.5" FillBehavior="Stop">
                            <DoubleAnimation.EasingFunction>
                                <CircleEase EasingMode="EaseOut" />
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard TargetName="IndeterminateToDeterminateCircularProgress" RepeatBehavior="Forever" Duration="0:0:9">
                        <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsIndeterminate">
                            <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:4" />
                        </BooleanAnimationUsingKeyFrames>
                        <DoubleAnimation From="20" To="100" Duration="0:0:2.5" BeginTime="0:0:4" 
                                         Storyboard.TargetProperty="Value"
                                         FillBehavior="HoldEnd">
                            <DoubleAnimation.EasingFunction>
                                <CircleEase EasingMode="EaseOut" />
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
                <BeginStoryboard>
                    <Storyboard TargetName="AnimatedProgressInCard" RepeatBehavior="Forever">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Value">
                            <DiscreteDoubleKeyFrame Value="0" KeyTime="0"/>
                            <DiscreteDoubleKeyFrame Value="1" KeyTime="0:0:0.1"/>
                            <!-- we have used a 20% startup to fade in on the actual control -->
                            <DiscreteDoubleKeyFrame Value="20" KeyTime="0:0:1"/>
                            <!-- pretend we are indeterminate for 4 seconds -->
                            <DiscreteDoubleKeyFrame Value="20" KeyTime="0:0:4"/>
                            <!-- now we become determinate and complete to 100% -->
                            <SplineDoubleKeyFrame Value="100" KeyTime="0:0:8"/>
                            <SplineDoubleKeyFrame Value="100" KeyTime="0:0:9"/>
                        </DoubleAnimationUsingKeyFrames>
                        <BooleanAnimationUsingKeyFrames  Storyboard.TargetProperty="IsIndeterminate" Duration="0:0:10">
                            <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:0.1" />
                            <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:3.9" />
                            <!-- now we become determinate and complete to 100% -->
                            <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:4" />
                        </BooleanAnimationUsingKeyFrames>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger.Actions>
        </EventTrigger>
    </UserControl.Triggers>
</UserControl>
